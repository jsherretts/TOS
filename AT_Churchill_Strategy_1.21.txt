#
# A trading strategy based on Ken Churchill's concepts
# Created 09/24/19 by Scott Olsen
# Questions?  Please contact me at: solsen@tdigital.com
#
# Version 1.2
#
# Version History
# 09/25/19 - SKO - v1.1
# Added condition to Gann hit counter to count after a new high/low is reached.
# Changed color of labels so they can be distinguished from other indicators.
#
# 09/26/19 - SKO - v1.2
# Added input option to trade Gann 25 level
# Backtesting was not working - cleaned up the trade logic

# 09/27/19 - SKO = v1.2.1
# Trend logic was incorrect

#hint: An automated trading strategy based on concepts by Ken Churchill.
#
input startTime = 0200; #hint startTime: When to start computing Highs/Low and Gann lines.  Based on EST.
input tradeTime = 0800; #hint tradeTime: When to start looking for trades.  Based on EST.
input endTime = 1300;   #hint endTime: When to stop trades and comutations.  Based on EST.
input contracts = 1;    #hint contracts: Number of contracts in one trade.
input maxTrades = 1;    #hint maxTrades: Maximum number of trades open at the same time.
input tradeGann25 = no; #hint tradeGann25: Option to trade the Gann 25 level.
#
# Variable declaration
# barNumber - used to determine trend. If High has a higher bar # than Low, then trend is UP
# if Low has a higher bar # than High then trend is DOWN.
# tradeCount - number of trades currently open
# isActive - the time between startTime and endTime
# canTrade - the time between tradeTime and endTime
# period - current period of chart (5 min for example). Currently not used, but could be useful
# trend - enumeration that defines the current trend
def na = Double.NaN;
def tickSize = TickSize();
def barNumber = BarNumber();
def tradeCount = GetQuantity();
def isActive = if GetLastDay() == GetDay() and SecondsFromTime(startTime) >= 0 and SecondsFromTime(endTime) < 0 then 1 else 0;
def canTrade = if GetLastDay() == GetDay() and SecondsFromTime(tradeTime) >= 0 and SecondsFromTime(endTime) < 0 then 1 else 0;
def period = GetAggregationPeriod() / 60000;
def trend = {default undefined, up, down};

#
# Define High / Low and Trend for Active Session
# activeLow - low for timeframe between startTime and endTime
# activeHigh - high for timeframe between startTime and endTime
# lowBar - bar # of activeLow
# highBar - bar # of activeHigh
# startBar - bar # of the start of the trade session (canTrade)
# trend - set trend based on bar number of low and high
#
def activeLow = if isActive then LowestAll(if isActive then low else na) else activeLow[1];
def activeHigh = if isActive then HighestAll(if isActive then high else na) else activeHigh[1];
def lowBar = if isActive and low == activeLow then barNumber else lowBar[1];
def highBar = if isActive and high == activeHigh then barNumber else highBar[1];
def startBar = if SecondsFromTime(tradeTime) == 0 then barNumber else startBar[1];
trend = if lowBar < highBar then trend.up else if lowBar > highBar then trend.down else trend.undefined;

#
# Define Gann Levels
# Sets the Gann 25, 50, and 75 levels based on trend.
# For example:  If the trend is UP, then the 25 level is below the high.
# If the trend is DOWN, then the 25 level is above the low.
#
def G25 = if isActive then If(trend == trend.up, activeHigh - ((activeHigh - activeLow) * 0.25), activeLow + ((activeHigh - activeLow) * 0.25)) else G25[1];
def G50 = if isActive then ((activeHigh - activeLow) * 0.5) + activeLow else G50[1];
def G75 = if isActive then If(trend == trend.up, activeHigh - ((activeHigh - activeLow) * 0.75), activeLow + ((activeHigh - activeLow) * 0.75)) else G75[1];
def GHeight =  RoundUp(0.25 * (activeHigh - activeLow) / tickSize, 0);

#
# See if Gann Levels have been touched
# This is a complex calculation.  We want to keep track of any 
# Gann levels that have been touched, because we only trade them once.
# This calculation starts at the beginning of the trading session (canTrade)
# If we are in an UP trend and the price moves BELOW a Gann level, the counter is incremented
# If we are in an DOWN trend and the price moves ABOVE a Gann level, the counter is incremented
# Only trade if the counter = 1
# and a new High/Low has been reached since start of trade session (canTrade)
#
# Issues to consider for coding:
# What happens if trend changes direction?
# Do we want an immediate signal when a Gann level is touched?
# Right now the signal happens when the close crosses below or above
# Do we reset the count when a new high/low is reached?
# In other words, can we trade the same Gann levels over again if a new
# high/low is reached.  Can't think of a way off hand to track a new high/low
#
def G25Hit = CompoundValue(1, if canTrade and (lowBar > startBar or highBar > startBar) and ((trend == trend.up and close crosses below G25) or (trend == trend.down and close crosses above G25)) then G25Hit[1] + 1 else G25Hit[1], 1);
def G50Hit = CompoundValue(1, if canTrade and (lowBar > startBar or highBar > startBar) and ((trend == trend.up and close crosses below G50) or (trend == trend.down and close crosses above G50)) then G50Hit[1] + 1 else G50Hit[1], 1);
def G75Hit = CompoundValue(1, if canTrade and (lowBar > startBar or highBar > startBar) and ((trend == trend.up and close crosses below G75) or (trend == trend.down and close crosses above G75)) then G75Hit[1] + 1 else G75Hit[1], 1);

#
# Trade logic
#
# Conditions for trade:
# 1) Be within trading hours (canTrade)
# 2) Height between Gann levels has to be at least 7 (GHeight)
# 3) One of the Gann levels has been touched (G25Hit, G50Hit, G75Hit)
# 4) Number of open trades has not been exceeded (maxTrades) - disabled right now
#
# Issues for further study:
# Backtesting only opens one order at a time and the logic for number of
# simultaneous trades (MaxTrades) has been turned off.
# Backtesting works for current day only. I'm sure it has to do with the
# GetLastDay() == GetDay() logic and will have to be studied later.
#

#
# Open Long Order
#
def openLongCondition = canTrade and
    GHeight >= 7 and
    trend == trend.up and
    #tradeCount < MaxTrades and
    ((close crosses below G25 and (tradeGann25 and G25Hit == 1)) or
    (close crosses below G50 and G50Hit == 1) or
    (close crosses below G75 and G75Hit == 1));
AddOrder(type = OrderType.BUY_TO_OPEN,
    condition = openLongCondition,
    price = close,
    tradeSize = contracts,
    tickcolor = Color.GREEN,
    arrowcolor = Color.GREEN,
    name = "AT Open Long Order");
#
# Open Short Order
#
def openShortCondition = canTrade and
    GHeight >= 7 and
    trend == trend.down and
    #tradeCount < MaxTrades and
    ((close crosses above G25 and (tradeGann25 and G25Hit == 1)) or
    (close crosses above G50 and G50Hit == 1) or
    (close crosses above G75 and G75Hit == 1));
AddOrder(type = OrderType.SELL_TO_OPEN,
    condition = openShortCondition,
    price = close,
    tradeSize = contracts,
    tickcolor = Color.RED,
    arrowcolor = Color.RED,
    name = "AT Open Short Order");
#
# Close Long Order
#
def closeLongCondition = trend == trend.up and
    (close >= EntryPrice() + (4 * ticksize) or
    close <= EntryPrice() - (16 * ticksize) or 
    SecondsTillTime(endTime) == 0);
AddOrder(type = OrderType.SELL_TO_CLOSE,
    condition = closeLongCondition,
    price = close,
    tradeSize = contracts,
    tickcolor = Color.RED,
    arrowcolor = Color.RED,
    name = "AT Close Long Order");
#
# Close Short Order
#
def closeShortCondition = trend == trend.down and
    (close <= EntryPrice() - (4 * ticksize) or
    close >= EntryPrice() + (16 * ticksize) or 
    SecondsTillTime(endTime) == 0);
AddOrder(type = OrderType.BUY_TO_CLOSE,
    condition = closeShortCondition,
    price = close,
    tradeSize = contracts,
    tickcolor = Color.RED,
    arrowcolor = Color.RED,
    name = "AT Close Short Order");
#
# Show labels
# These are labels for debugging.  Can be commented out if not needed.
#
AddLabel(yes, "Last Day: " + GetLastDay(), Color.CYAN);
AddLabel(yes, "Today: " + GetDay(), Color.CYAN);
AddLabel(yes, "Active: " + if isActive then "Yes" else "No", Color.CYAN);
AddLabel(yes, "Can Trade: " + if canTrade then "Yes" else "No", Color.CYAN);
AddLabel(yes, "Low: " + Floor(activeLow) + "'" + (activeLow - Floor(activeLow)) / tickSize, Color.CYAN);
AddLabel(yes, "High: " + Floor(activeHigh) + "'" + (activeHigh - Floor(activeHigh)) / tickSize, Color.CYAN);
AddLabel(yes, "G25: " + Floor(G25) + "'" + RoundDown((G25 - Floor(G25)) / tickSize, 0), Color.CYAN);
AddLabel(yes, "G50: " + Floor(G50) + "'" + RoundDown((G50 - Floor(G50)) / tickSize, 0), Color.CYAN);
AddLabel(yes, "G75: " + Floor(G75) + "'" + RoundDown((G75 - Floor(G75)) / tickSize, 0), Color.CYAN);
AddLabel(yes, "1/4 Range: " + GHeight, Color.CYAN);
AddLabel(yes, "Start Bar: " + startBar, Color.CYAN);
AddLabel(yes, "Low Bar: " + lowBar, Color.CYAN);
AddLabel(yes, "High Bar: " + highBar, Color.CYAN);
AddLabel(yes, "G25 Hit: " + G25Hit, Color.CYAN);
AddLabel(yes, "G50 Hit: " + G50Hit, Color.CYAN);
AddLabel(yes, "G75 Hit: " + G75Hit, Color.CYAN);
AddLabel(yes, "Trend: " + if trend == trend.up then "Up" else "Down", Color.CYAN);
AddLabel(yes, "# of Pos: " + tradeCount, Color.CYAN);

#
# Bar number labels
# This label is to show corresponding bar number for every 5 bars on the chart
# Useful for debugging lowBar and highBar, but not needed.
# Can be commented out.
#
def interval = 5;
def Every_Interval = interval - 1;
plot bn = if (barNumber - 1) % interval == 1 then barNumber else na;
bn.SetPaintingStrategy(PaintingStrategy.VALUES_BELOW);
plot bn_1 = if interval == 0 or interval == 1 then barNumber else na;
bn_1.SetPaintingStrategy(PaintingStrategy.VALUES_BELOW);
